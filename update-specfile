#!/bin/bash
#
# Script to automatically update the mu.spec specfile with changes from git
# master.

set -eu

# path to the mu git directory
mudir=../mu

# the specfile
specfile=mu.spec

# the base mu version
muversion='1.1.0'

usage() { echo "usage: $(basename "$0") [-d DIRNAME] [-s SPECFILE]"; }

while getopts ":d:hs:v:x" opt; do
  case $opt in
    d) mudir="$OPTARG" ;;
    h) usage; exit 0 ;;
    s) specfile="$OPTARG" ;;
    v) muversion="$OPTARG" ;;
    x) set -x ;;
    \?) echo "Invalid option: -$OPTARG" >&2 ;;
  esac
done
shift "$((OPTIND-1))"

if ! pushd "$mudir" &>/dev/null; then
  echo "error: Failed to cd to dir $mudir" >&2
  exit 1
fi

# pull upstream changes
git pull -q

# get the long commit
gitcommit=$(git rev-parse HEAD)

# get the long date
gitdate=$(git log -1 --date=short --pretty=format:%cd | tr -d '-')

popd &>/dev/null

# reset spec file
git checkout -q "$specfile"

oldversion=$(awk '/^%define gitcommit/ {print $3}' "$specfile")
if [[ "$oldversion" = "$gitcommit" ]]; then
   echo "git commit is still ${gitcommit}, no changes necessary"
   exit
fi

# calculate a file checksum
cksum() { sha1sum "$specfile"; }

# run sed and ensure the file changed
runsed() {
  orig=$(cksum)
  sed -Ei "$1" "$specfile"
  if [[ $(cksum) == "$orig" ]]; then
    echo "error: after running sed $1 spec file did not change" >&2
    return 1
  fi
}

# run sed
runsed "s/^(%define gitcommit\s+)[0-9a-f]+$/\1${gitcommit}/"
runsed "s/^(%define gitdate\s+)[0-9]+$/\1${gitdate}/"

# Create a new version of the specfile with a new changelog entry. This is kind
# of gross as rpmdev-bumpspec should be able to do this, but I had some issues
# with how it interpreted the existing macros in the file, so this is what we
# have.
rewrite-specfile() {
  local IFS=''
  while read -r line; do
    printf "%s\n" "$line"
    if [[ "$line" == '%changelog' ]]; then
      echo "* $(date '+%b %d %Y') $(rpmdev-packager) - ${muversion}-git${gitdate}.1"
      echo "- Auto update with changes in master, new git commit ${gitcommit:0:8}"
      echo
    fi
  done <"$specfile"
}

if command -v sponge &>/dev/null; then
  rewrite-specfile | sponge "$specfile"
else
  tmpfile=$(mktemp)
  trap 'rm -f ${tmpfile}' EXIT
  rewrite-specfile >"$tmpfile"
  mv "$tmpfile" "$specfile"
fi

git add "$specfile"
git diff "$specfile"

echo
echo "Please review the changes above before committing these changes."
